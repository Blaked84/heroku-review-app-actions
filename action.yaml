name: "Manage Heroku Review Apps"
description: Use Heroku API to replicate the review app integration
author: Peter Mbanugo (@pmbanugo - GitHub)
inputs:
  api-key:
    description: "Your Heroku API key"
    required: true
  files-glob:
    default: "*"
    description: "The glob pattern for files to include in the deployment"
    required: false
  pipeline-id:
    description: "The id of the pipeline to deploy review app for"
    required: true
  base-name:
    description: "The prefix used to generate review app name. This should be the same as what you specified for the review app URL pattern in Heroku Dashboard"
    required: true
outputs:
  url:
    description: "The URL for the app"
    value: ${{ steps.output-url.outputs.url }}
branding:
  icon: "play-circle"
  color: "purple"
runs:
  using: "composite"
  steps:
    - name: Generate app name
      shell: bash
      run: |
        echo "APP_NAME=${{ inputs.base-name }}-pr-${{ github.event.number }}" >> $GITHUB_ENV
        echo "PIPELINE_ID=${{ inputs.pipeline-id }}" >> $GITHUB_ENV
    - name: Create Source Endpoint
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      id: source_endpoint
      shell: bash
      run: |
        export RESPONSE=$(curl -X POST https://api.heroku.com/sources \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}")
        echo ::set-output name=SOURCE_ENDPOINT::$(echo $RESPONSE | jq -r '{get: .source_blob.get_url, put: .source_blob.put_url}')
    - name: Compress Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        tar -czvf source.tar.gz ${{ inputs.files-glob }}
    - name: Upload Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        export URL=$(echo ${{ toJSON(steps.source_endpoint.outputs.SOURCE_ENDPOINT) }} | jq -r '.put')
        curl $URL -X PUT -H 'Content-Type:' --data-binary @source.tar.gz
    - name: Get Review app environment variables
      id: get_env_var
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
      shell: bash
      run: |
        export REVIEW_APP_ENV=$(curl -n https://api.heroku.com/pipelines/$PIPELINE_ID/stage/review/config-vars \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}")
        echo $REVIEW_APP_ENV 
        echo ::set-output name=REVIEW_APP_ENV::$(echo $REVIEW_APP_ENV)
    - name: Create Review App
      id: create_review_app
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
      shell: bash
      run: |
        export REVIEW_APP_ID=$(export SOURCE_GET_URL=$(echo ${{ toJSON(steps.source_endpoint.outputs.SOURCE_ENDPOINT) }} | jq -r '.get')
        curl -X POST https://api.heroku.com/review-apps \
        -d '{
        "source_blob": {"url": "'"$SOURCE_GET_URL"'", "version": "'"${{ github.event.pull_request.head.sha }}"'"},
        "branch": "${{ github.head_ref }}",
        "pipeline": "${{ inputs.pipeline-id }}",
        "pr_number": ${{ github.event.number }},
        "environment": ${{ steps.get_env_var.outputs.REVIEW_APP_ENV }}
        }' \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}" | jq -r .id)
        echo $REVIEW_APP_ID 
        echo ::set-output name=REVIEW_APP_ID::$(echo $REVIEW_APP_ID)
    - name: Get App ID
      id: get_app_id
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
      shell: bash
      run: |
        sleep 5
        export APP_ID=$(curl -n https://api.heroku.com/review-apps/${{ steps.create_review_app.outputs.REVIEW_APP_ID }} \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}" \
        | jq -r .app.id)
        echo $APP_ID 
        echo ::set-output name=APP_ID::$(echo $APP_ID)
    - name: Update App name
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
      shell: bash
      run: |
        curl -n -X PATCH https://api.heroku.com/apps/${{ steps.get_app_id.outputs.APP_ID }} \
        -d '{
          "name": "'"$APP_NAME"'"
        }' \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3"  \
        -H "Authorization: Bearer ${{ inputs.api-key }}"

    - name: Create Build
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'synchronize' }}
      shell: bash
      run: |
        export SOURCE_GET_URL=$(echo ${{ toJSON(steps.source_endpoint.outputs.SOURCE_ENDPOINT) }} | jq -r '.get')
        export OUTPUT_STREAM_URL=$(curl -X POST https://api.heroku.com/apps/$APP_NAME/builds \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "${{ github.event.pull_request.head.sha }}"}}' \
        -H 'Accept: application/vnd.heroku+json; version=3' \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.api-key }}" | \
        jq -r '.output_stream_url')
        curl $OUTPUT_STREAM_URL
    - name: Set Output:url
      id: output-url
      shell: bash
      run: echo "::set-output name=url::$(echo https://$APP_NAME.herokuapp.com)"
    - name: Delete Review App
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        curl -X DELETE https://api.heroku.com/apps/$APP_NAME \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.api-key }}"
